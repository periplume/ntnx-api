#!/usr/bin/env bash
# desc: cluster config setup script
# author: Jason Lindemuth
# source: https://github.com/periplume/ntnx-api
# version 1.0
# TODO add UNSAFE mode (password saving vs no password saving)

scriptname=${0##*/}
logfile=logs/$scriptname.log
configdir=cfg
clusterconfig=cfg/cluster.json

# set logging
# 0 for nothing (silent)
# 1 to log to $scriptname.log
debug=0

usage () {
	cat << EOF
usage: $scriptname
$ $scriptname $BLUE init $RESET      (set up cluster authentication)
EOF
exit
}

printhelp () {
	# desc: print out help info
	cat << EOF

step one: configure for an existing cluster
$BLUE # ntnx-api init $RESET
 (use either a CVM IP, the CVM VIP, or the PE IP, depending on use case)

step two: test connectivity and authentication
$BLUE # ntnt-api testauth $RESET
 (this will prompt for a password, connect to the cluster, and
 record the cluster UUID into the config file)

step three: script some $RED rad $RESET tools!

EOF
exit
}

timestamp () {
	# desc: return a timestamp for logging
  # args: none
	# return format: 'YYYY-MM-DD HH:MM:SS SECONDS-SINCE-1970'
  date '+%F %T %s'
}

logevent () {
	# desc: logging facility
  # $@: one arg (multi word) the log message
  # logs event to global $logfile if debug=1
	if [ $debug = 0 ]
	then
		return 0
	elif [ $debug = 1 ]
	then
		echo "[$(timestamp)] $scriptname $@" >> $logfile
	fi
}

colorize () {
	# desc: rudimentary term inquiry to set output colorization
	# args: none
	if [ -x "$(command -v tput)" ]
	then
		logevent "f:$FUNCNAME: true[0]: tput exists and is executable, setting colors"
		if [ $(tput colors) = 256 ]
		then
			logevent "f:$FUNCNAME: true[0]: tput reports 256 colors; setting color VAR tags"
			GREEN="$(tput setaf 2)"
			YELLOW="$(tput setaf 3)"
			RED="$(tput setaf 1)"
			BLUE="$(tput setaf 4)"
			RESET="$(tput setaf 15)"
		elif [ $(tput colors) = 8 ]
		then
			logevent "f:$FUNCNAME: true[0]: tput reports 8 colors; setting color VAR tags"
			GREEN="$(tput setaf 2)"
			YELLOW="$(tput setaf 3)"
			RED="$(tput setaf 1)"
			BLUE="$(tput setaf 4)"
			RESET="$(tput setaf 9)"
		else
			logevent "f:$FUNCNAME: err[1]: tput colors reports number other than 8 or 256"
		fi
	fi
}

init () {
	# desc: read config info from user and save to json
	if [ -a $clusterconfig ]
	then
		readIP=$(cat cfg/cluster.json | jq '.cluster_ip' | tr -d '"')
		readUser=$(cat cfg/cluster.json | jq '.username' | tr -d '"')
	fi
	echo -n "Enter the IP address for the cluster [$readIP]: "
	read IP
	if [ -z $IP ]
	then
		IP=$readIP
	fi
	echo -n "Enter the username for API access [$readUser]: "
	read USER
	if [ -z $USER ]
	then
		USER=admin
	fi
	jq -n --arg IP $IP --arg USER $USER \
		'{cluster_ip:$IP,username:$USER}' > $clusterconfig
	if [ $? = 0 ]
	then
		logevent "f:$FUNCNAME: true[$?]: successfully wrote json config in $clusterconfig"
		return 0
	else
		logevent "f:$FUNCNAME: err[$?]: failed to write json config in $clusterconfig"
		return 1
	fi
}

testauth () {
	IP=$(cat cfg/cluster.json | jq '.cluster_ip' | tr -d '"')
	USERNAME=$(cat cfg/cluster.json | jq '.username' | tr -d '"')
	echo -n "Please enter the password for $USERNAME: "
	read -s PASSWORD
	echo "thank you...fetching api data now"
	AUTH_HEADER="`echo -n $USERNAME:$PASSWORD | base64`"
	uuid=$(curl --insecure -X GET --connect-timeout 5 \
		https://$IP:9440/api/nutanix/v3/users/me \
		-H "Accept: application/json" \
		-H "Authorization: Basic $AUTH_HEADER" \
		-H "cache-control: no-cache" \
		| jq -r '.status.resources.access_control_policy_reference_list[0].uuid')
	echo $uuid
}

#
# MAIN
#
# test for term colors and set color VARS accordingly
colorize

# read the command arguments
if [ $# -eq 0 ];
then
  usage
else
  while [ $# -gt 0 ]
  do
    case "$1" in
      init)
        if [ $# -gt 1 ]
				then
					usage
        else
					init
					if [ $? = 0 ]
					then
						echo "$GREEN SUCCESS $RESET run 'ntnx-api test' next"
						exit 
					else
						echo "$RED FAIL $RESET config file was not saved"
						exit
					fi
				fi
        ;;
			test)
				testauth
				exit
				;;
			help)
				printhelp
				;;
			*)
				usage
				;;
		esac
	done
fi

